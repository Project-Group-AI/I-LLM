import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import re
import os
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold
import json
import requests
from urllib.parse import quote

class ChatbotInclusifGemini:
    def __init__(self, api_base_url, gemini_api_key):
        """
        Initialise le chatbot inclusif avec l'API des √©tablissements publics
        et l'API Gemini 2.0 Flash.
        
        Args:
            api_base_url (str): URL de base de l'API
            gemini_api_key (str): Cl√© API pour Gemini
        """
        self.api_base_url = api_base_url
        self.model = SentenceTransformer('paraphrase-multilingual-mpnet-base-v2')
        
        # Configuration de Gemini
        genai.configure(api_key=gemini_api_key)
        
        # Mod√®le Gemini pour la g√©n√©ration de documents hypoth√©tiques
        generation_config = {
            "temperature": 0.2,
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 1024,
        }
        
        safety_settings = {
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        }
        
        self.gemini_model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        
        # Configuration pour les r√©ponses naturelles (temp√©rature plus √©lev√©e)
        natural_generation_config = {
            "temperature": 0.7,
            "top_p": 0.9,
            "top_k": 40,
            "max_output_tokens": 1024,
        }
        
        self.gemini_natural_model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config=natural_generation_config,
            safety_settings=safety_settings
        )
        
        # Base de connaissances pour les questions g√©n√©rales
        # Temp√©rature plus √©lev√©e pour les r√©ponses informatives
        knowledge_generation_config = {
            "temperature": 0.5,
            "top_p": 0.9,
            "top_k": 40,
            "max_output_tokens": 2048,  # Plus long pour les r√©ponses informatives
        }
        
        self.gemini_knowledge_model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config=knowledge_generation_config,
            safety_settings=safety_settings
        )
        
        # V√©rification de l'API
        self.check_api_connection()
        
        # Initialisation de la base de connaissances sur le handicap
        self.initialize_knowledge_base()
        
    def check_api_connection(self):
        """
        V√©rifie la connexion √† l'API et r√©cup√®re des informations sur la structure des donn√©es
        """

        try:
            # URL de l'API (assure-toi que self.api_base_url est bien d√©fini)
            api_url = f"{self.api_base_url}?page=1&page_size=1"  # Ajout de params pour limiter la charge

            # Requ√™te avec timeout pour √©viter de bloquer l'ex√©cution
            response = requests.get(api_url, timeout=10)
            response.raise_for_status()  # L√®ve une erreur si le statut HTTP est mauvais (ex: 404, 500)

            # V√©rification du format JSON
            try:
                data = response.json()
            except requests.exceptions.JSONDecodeError:
                raise ValueError("La r√©ponse de l'API n'est pas un JSON valide.")

            # V√©rification que la r√©ponse contient bien des donn√©es
            if "data" in data and isinstance(data["data"], list) and len(data["data"]) > 0:
                print("‚úÖ Connexion √† l'API r√©ussie.")
                print(f"üîπ Structure des donn√©es : {list(data['data'][0].keys())}")
            else:
                print("‚ö†Ô∏è Connexion r√©ussie, mais aucune donn√©e trouv√©e.")

        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erreur de connexion √† l'API : {e}")
            raise
        except Exception as e:
            print(f"‚ùå Une erreur inattendue s'est produite : {e}")
            raise

    
    def initialize_knowledge_base(self):
        """
        Initialise la base de connaissances sur le handicap et l'accessibilit√©
        """
        # Dictionnaire contenant des informations essentielles sur les diff√©rents types de handicap
        # et les aides disponibles en France
        self.knowledge_base = {
            "types_handicap": [
                "moteur", "visuel", "auditif", "mental", "psychique", "cognitif", "polyhandicap"
            ],
            "aides_financieres": [
                "AAH (Allocation aux Adultes Handicap√©s)",
                "PCH (Prestation de Compensation du Handicap)",
                "AEEH (Allocation d'√âducation de l'Enfant Handicap√©)",
                "MVA (Majoration pour la Vie Autonome)",
                "ACTP (Allocation Compensatrice pour Tierce Personne)"
            ],
            "organismes": [
                "MDPH (Maison D√©partementale des Personnes Handicap√©es)",
                "CAF (Caisse d'Allocations Familiales)",
                "CCAS (Centre Communal d'Action Sociale)",
                "CPAM (Caisse Primaire d'Assurance Maladie)",
                "APF France Handicap",
                "UNAPEI"
            ],
            "droits_accessibilite": [
                "Loi de 2005 pour l'√©galit√© des droits et des chances",
                "Obligation d'accessibilit√© des ERP (√âtablissements Recevant du Public)",
                "Carte Mobilit√© Inclusion (CMI)",
                "RQTH (Reconnaissance de la Qualit√© de Travailleur Handicap√©)"
            ]
        }
        
    def classify_query_type(self, query):
        """
        Classifie le type de requ√™te de l'utilisateur pour d√©terminer
        s'il s'agit d'une recherche d'√©tablissement ou d'une question g√©n√©rale.
        
        Args:
            query (str): La requ√™te de l'utilisateur
            
        Returns:
            str: Type de requ√™te ('establishment_search', 'general_info', 'off_topic')
        """
        prompt = f"""
        Analyse la requ√™te suivante et d√©termine son type:
        
        "{query}"
        
        Classifie la requ√™te dans l'une des cat√©gories suivantes:
        1. "establishment_search" - Une recherche d'√©tablissement public ou d'un lieu avec ou sans crit√®res d'accessibilit√©
        2. "general_info" - Une question g√©n√©rale sur le handicap, l'accessibilit√©, les droits, les aides, etc.
        3. "off_topic" - Une question qui n'est pas li√©e au handicap ou √† l'accessibilit√©
        
        R√©ponds uniquement par le type de requ√™te (un seul mot parmi les trois propos√©s), sans aucune explication.
        """
        
        try:
            response = self.gemini_model.generate_content(prompt)
            response_text = response.text.strip().lower()
            
            if "establishment_search" in response_text:
                return "establishment_search"
            elif "general_info" in response_text:
                return "general_info"
            else:
                return "off_topic"
        except Exception as e:
            print(f"Erreur lors de la classification de la requ√™te: {e}")
            # Par d√©faut, on suppose que c'est une recherche d'√©tablissement
            return "establishment_search"
        
    def generate_hypothetical_document_with_gemini(self, query):
        """
        G√©n√®re un document hypoth√©tique bas√© sur la requ√™te de l'utilisateur en utilisant Gemini.
        
        Args:
            query (str): La requ√™te de l'utilisateur
            
        Returns:
            str: Document hypoth√©tique g√©n√©r√©
            dict: Crit√®res extraits de la requ√™te
        """
        # Construire le prompt pour Gemini
        prompt = f"""
        Analyse la requ√™te utilisateur suivante et extrait les crit√®res de recherche pertinents pour un √©tablissement public en France.
        
        Requ√™te: "{query}"
        
        Cr√©e un document hypoth√©tique au format JSON avec uniquement les champs suivants si pertinents:
        - commune: le nom de la ville ou commune
        - activite: le type d'√©tablissement (restaurant, mus√©e, etc.), si rien n'est mentionn√©, laisser un espace uniquement pour ce champ
        - entree_pmr: true si l'accessibilit√© PMR est mentionn√©e
        - stationnement_pmr: true si le stationnement PMR est mentionn√©
        - stationnement_presence: true si le stationnement est mentionn√©
        - sanitaires_presence: true si des sanitaires sont mentionn√©s
        - sanitaires_adaptes: true si des sanitaires adapt√©s sont mentionn√©s
        - accueil_equipements_malentendants_presence: true si des √©quipements pour malentendants sont mentionn√©s
        - accueil_audiodescription_presence: true si l'audiodescription est mentionn√©e
        - cheminement_ext_bande_guidage: true si des bandes de guidage sont mentionn√©es
        - cheminement_ext_plain_pied: true si l'accessibilit√© de plain-pied est mentionn√©e
        - transport_station_presence: true si la proximit√© des transports est mentionn√©e
        
        Retourne uniquement le JSON, sans aucun autre texte.
        Si la requ√™te ne concerne pas la recherche d'un √©tablissement public, retourne un JSON vide {{}}.
        """
        
        try:
            # Appel √† l'API Gemini
            response = self.gemini_model.generate_content(prompt)
            
            # R√©cup√©ration du texte
            response_text = response.text
            
            # Extraction du JSON
            # Nettoyage du texte pour s'assurer qu'il est au format JSON
            json_text = response_text.strip()
            if json_text.startswith('```json'):
                json_text = json_text[7:]
            if json_text.endswith('```'):
                json_text = json_text[:-3]
            json_text = json_text.strip()
            
            # Conversion en dictionnaire
            criteria = json.loads(json_text)
            
            # Cr√©ation du document texte
            doc_text = ""
            for key, value in criteria.items():
                doc_text += f"{key} = {value}\n"
                
            return doc_text, criteria
            
        except Exception as e:
            print(f"Erreur lors de l'appel √† Gemini: {e}")
            return "", {}
        
    def search_establishments(self, criteria, top_n=5):
        """
        Recherche les √©tablissements correspondant aux crit√®res extraits via l'API.
        
        Args:
            criteria (dict): Crit√®res de recherche
            top_n (int): Nombre maximum de r√©sultats √† retourner
            
        Returns:
            list: Liste des √©tablissements correspondants
        """
        # Construire l'URL de requ√™te √† l'API
        query_params = []
        
        # Param√®tres sp√©ciaux pour commune et activit√© (recherche exacte)
        if 'commune' in criteria:
            query_params.append(f"commune__exact={quote(criteria['commune'])}")
        
        if 'activite' in criteria:
            query_params.append(f"activite__contains={quote(criteria['activite'])}")
        
        # Autres filtres d'accessibilit√© (correspondance exacte pour les bool√©ens)
        boolean_fields = [
            'entree_pmr', 'stationnement_pmr', 'stationnement_presence', 
            'sanitaires_presence', 'sanitaires_adaptes', 
            'accueil_equipements_malentendants_presence', 'accueil_audiodescription_presence',
            'cheminement_ext_bande_guidage', 'cheminement_ext_plain_pied',
            'transport_station_presence'
        ]
        
        for field in boolean_fields:
            if field in criteria and criteria[field] is True:
                query_params.append(f"{field}__exact=true")
        
        # Limite du nombre de r√©sultats
        query_params.append(f"page_size={top_n}")
        
        # Construction de l'URL compl√®te
        api_url = f"{self.api_base_url}?{'&'.join(query_params)}"
        print(f"URL de recherche API: {api_url}")
        
        try:
            # Requ√™te √† l'API
            response = requests.get(api_url)
            response.raise_for_status()
            
            # Conversion des r√©sultats
            establishments = response.json()
            print(f"Nombre d'√©tablissements trouv√©s: {len(establishments)}")
            
            return establishments
            
        except Exception as e:
            print(f"Erreur lors de la recherche via l'API: {e}")
            return []
    
    def generate_natural_response(self, establishments, query, criteria):
        """
        G√©n√®re une r√©ponse naturelle aux r√©sultats trouv√©s en utilisant Gemini.
        
        Args:
            establishments (list): Liste des √©tablissements trouv√©s
            query (str): La requ√™te originale de l'utilisateur
            criteria (dict): Les crit√®res extraits de la requ√™te
                
        Returns:
            str: R√©ponse naturelle g√©n√©r√©e
        """
        if not establishments:
            # Si aucun √©tablissement trouv√©
            prompt = f"""
            Tu es un assistant sp√©cialis√© dans la recherche d'√©tablissements publics accessibles en France.
            
            L'utilisateur a demand√©: "{query}"
            
            J'ai cherch√© dans ma base de donn√©es avec les crit√®res suivants:
            {json.dumps(criteria, ensure_ascii=False, indent=2)}
            
            Mais je n'ai trouv√© aucun √©tablissement correspondant. 
            
            G√©n√©rez une r√©ponse empathique, naturelle et en fran√ßais qui:
            1. Informe l'utilisateur qu'aucun √©tablissement n'a √©t√© trouv√©
            2. Sugg√®re de reformuler sa demande ou d'√©largir ses crit√®res
            3. Si une ville est mentionn√©e, r√©utilise-la dans la r√©ponse
            4. Si un type d'√©tablissement est mentionn√©, r√©utilise-le dans la r√©ponse
            
            √âcrivez votre r√©ponse comme si vous vous adressiez directement √† l'utilisateur, sans introduction ni conclusion artificielle.
            """
        else:
            # V√©rifie que seuls les √©tablissements dans 'data' sont trait√©s
            if isinstance(establishments, dict) and 'data' in establishments:
                establishments = establishments['data']
            
            # Pr√©paration des donn√©es des √©tablissements pour le prompt
            establishments_data = []
            for i, estab in enumerate(establishments, 1):
                if isinstance(estab, dict):  # V√©rification si 'estab' est bien un dictionnaire
                    estab_info = {
                        "nom": estab.get('name', '√âtablissement sans nom'),
                        "activite": estab.get('activite', 'Non sp√©cifi√©'),
                    }
                    
                    # Adresse
                    address_parts = []
                    if estab.get('numero'):
                        address_parts.append(str(estab['numero']))
                    if estab.get('voie'):
                        address_parts.append(estab['voie'])
                    if estab.get('commune'):
                        address_parts.append(estab['commune'])
                    if estab.get('code_postal'):  # Notez le changement possible par rapport au CSV
                        address_parts.append(str(estab['code_postal']))
                        
                    estab_info["adresse"] = ' '.join(str(part) for part in address_parts if part)
                    
                    # Accessibilit√©
                    access_features = []
                    if estab.get('entree_pmr') == True:
                        access_features.append("Entr√©e accessible PMR")
                    if estab.get('stationnement_pmr') == True:
                        access_features.append("Stationnement PMR")
                    if estab.get('sanitaires_adaptes') == True:
                        access_features.append("Sanitaires adapt√©s")
                    if estab.get('accueil_equipements_malentendants_presence') == True:
                        access_features.append("√âquipements pour malentendants")
                    if estab.get('accueil_audiodescription_presence') == True:
                        access_features.append("Audiodescription disponible")
                        
                    estab_info["accessibilite"] = access_features
                    
                    # Contact
                    contact_info = {}
                    if estab.get('contact_url'):
                        contact_info["contact"] = estab['contact_url']
                    if estab.get('site_internet'):
                        contact_info["site_web"] = estab['site_internet']
                    if estab.get('web_url'):
                        contact_info["page_web"] = estab['web_url']
                    if estab.get('latitude') and estab.get('longitude'):
                        contact_info["coordonnees_gps"] = f"{estab['latitude']}, {estab['longitude']}"
                        
                    estab_info["contact"] = contact_info
                    
                    establishments_data.append(estab_info)
                else:
                    print(f"√âl√©ment non attendu: {estab}")  # Message de d√©bogage pour voir l'√©l√©ment incorrect
                    
            # Prompt pour Gemini
            prompt = f"""
            Tu es un assistant sp√©cialis√© dans la recherche d'√©tablissements publics accessibles en France.
            
            L'utilisateur a demand√©: "{query}"
            
            J'ai trouv√© {len(establishments_data)} √©tablissement(s) qui correspondent aux crit√®res suivants:
            {json.dumps(criteria, ensure_ascii=False, indent=2)}
            
            Voici les informations sur ces √©tablissements:
            {json.dumps(establishments_data, ensure_ascii=False, indent=2)}
            
            G√©n√©rez une r√©ponse naturelle, conversationnelle et en fran√ßais qui:
            1. Commence par confirmer que vous avez trouv√© des √©tablissements correspondant √† la demande
            2. Pr√©sentez bri√®vement chaque √©tablissement en mentionnant:
            - Son nom
            - Son adresse
            - Ses caract√©ristiques d'accessibilit√© en rapport avec la demande
            - Les caract√©ristiques d'accessibilit√© suppl√©mentaires si disponibles
            - Les informations de contact si disponibles
            3. Mettez en avant les aspects d'accessibilit√© qui correspondent sp√©cifiquement √† la demande de l'utilisateur
            4. Si les √©tablissements ont des caract√©ristiques communes, regroupez-les pour √©viter la r√©p√©tition
            
            Important:
            - Utilisez un ton naturel, conversationnel et empathique
            - √âvitez les formulations trop formelles ou robotiques
            - Incluez des phrases de transition naturelles entre les √©tablissements
            - Adaptez votre r√©ponse pour qu'elle r√©ponde directement aux pr√©occupations d'accessibilit√© mentionn√©es dans la requ√™te
            - Ne mentionnez pas explicitement que vous √™tes un assistant IA dans votre r√©ponse
            
            √âcrivez votre r√©ponse comme si vous vous adressiez directement √† l'utilisateur, sans introduction ni conclusion artificielle.
            """
            
        try:
            # Appel √† l'API Gemini avec une temp√©rature plus √©lev√©e pour des r√©ponses naturelles
            response = self.gemini_natural_model.generate_content(prompt)
            return response.text
        except Exception as e:
            print(f"Erreur lors de la g√©n√©ration de la r√©ponse naturelle: {e}")
            if establishments:
                return f"J'ai trouv√© {len(establishments)} √©tablissements correspondant √† votre recherche, mais je n'ai pas pu g√©n√©rer une r√©ponse d√©taill√©e. Veuillez r√©essayer ou reformuler votre demande."
            else:
                return "Je n'ai pas trouv√© d'√©tablissements correspondant √† vos crit√®res. Essayez peut-√™tre d'√©largir votre recherche ou de reformuler votre demande."



    def generate_knowledge_response(self, query):
        """
        G√©n√®re une r√©ponse pour les questions g√©n√©rales sur le handicap et l'accessibilit√©.
        
        Args:
            query (str): La requ√™te de l'utilisateur
            
        Returns:
            str: R√©ponse informative sur le sujet demand√©
        """
        # Extraction des mots-cl√©s potentiels
        query_lower = query.lower()
        relevant_keywords = []
        
        # V√©rification des types de handicap mentionn√©s
        for handicap_type in self.knowledge_base["types_handicap"]:
            if handicap_type in query_lower:
                relevant_keywords.append(handicap_type)
        
        # V√©rification des aides financi√®res mentionn√©es
        for aide in self.knowledge_base["aides_financieres"]:
            aide_lower = aide.lower()
            if aide_lower in query_lower or aide.split('(')[0].strip().lower() in query_lower:
                relevant_keywords.append(aide)
        
        # V√©rification des organismes mentionn√©s
        for organisme in self.knowledge_base["organismes"]:
            organisme_lower = organisme.lower()
            if organisme_lower in query_lower or organisme.split('(')[0].strip().lower() in query_lower:
                relevant_keywords.append(organisme)
        
        # V√©rification des droits mentionn√©s
        for droit in self.knowledge_base["droits_accessibilite"]:
            if droit.lower() in query_lower:
                relevant_keywords.append(droit)
        
        # Cr√©ation du prompt pour Gemini
        prompt = f"""
        Tu es un assistant sp√©cialis√© dans l'information sur le handicap et l'accessibilit√© en France.
        
        L'utilisateur a pos√© la question suivante:
        "{query}"
        
        Voici quelques informations pertinentes sur ce sujet:
        
        Types de handicap: {', '.join(self.knowledge_base["types_handicap"])}
        
        Aides financi√®res principales:
        {', '.join(self.knowledge_base["aides_financieres"])}
        
        Organismes importants:
        {', '.join(self.knowledge_base["organismes"])}
        
        Droits et l√©gislation:
        {', '.join(self.knowledge_base["droits_accessibilite"])}
        
        Mots-cl√©s particuli√®rement pertinents dans cette question:
        {', '.join(relevant_keywords) if relevant_keywords else "Aucun mot-cl√© sp√©cifique identifi√©"}
        
        G√©n√®re une r√©ponse en fran√ßais qui:
        1. R√©pond directement √† la question de l'utilisateur
        2. Fournit des informations pr√©cises et √† jour sur le sujet du handicap et de l'accessibilit√©
        3. Mentionne les aides ou organismes pertinents quand c'est appropri√©
        4. Utilise un ton bienveillant, empathique et inclusif
        5. √âvite le jargon technique quand c'est possible
        6. Reste factuel et pr√©cis
        
        Si tu ne connais pas la r√©ponse exacte √† une question tr√®s sp√©cifique (comme les montants exacts des aides), pr√©cise que ces informations peuvent varier et qu'il est pr√©f√©rable de contacter directement les organismes concern√©s.
        
        √âcris ta r√©ponse comme si tu t'adressais directement √† l'utilisateur, sans introduction ni conclusion artificielle.
        """
        
        try:
            # Appel √† l'API Gemini avec une temp√©rature moyenne pour des r√©ponses informatives
            response = self.gemini_knowledge_model.generate_content(prompt)
            return response.text
        except Exception as e:
            print(f"Erreur lors de la g√©n√©ration de la r√©ponse sur les connaissances: {e}")
            return "Je suis d√©sol√©, mais je ne peux pas r√©pondre √† cette question pour le moment. Veuillez contacter directement la MDPH de votre d√©partement pour obtenir des informations pr√©cises sur les aides et services disponibles."
    
    def process_query(self, query):
        """
        Traite la requ√™te de l'utilisateur et renvoie une r√©ponse.
        
        Args:
            query (str): Requ√™te de l'utilisateur
            
        Returns:
            str: R√©ponse du chatbot
        """
        # Classification de la requ√™te
        query_type = self.classify_query_type(query)
        print(f"Type de requ√™te d√©tect√©: {query_type}")
        
        # Traitement selon le type de requ√™te
        if query_type == "off_topic":
            return "Je suis d√©sol√©, je ne peux vous aider que pour des recherches d'√©tablissements publics en France et des informations sur le handicap et l'accessibilit√©."
        
        elif query_type == "general_info":
            # Traitement des questions g√©n√©rales sur le handicap
            return self.generate_knowledge_response(query)
        
        else:  # establishment_search
            # G√©n√©ration du document hypoth√©tique avec Gemini
            hypothetical_doc, criteria = self.generate_hypothetical_document_with_gemini(query)
            
            # Affichage du document hypoth√©tique pour le d√©bogage
            print("Document hypoth√©tique g√©n√©r√©:")
            print(hypothetical_doc)
            print("Crit√®res extraits:", criteria)
            
            # V√©rification des crit√®res suffisants
            if not criteria:
                return "Je ne comprends pas votre demande concernant un √©tablissement. Pourriez-vous pr√©ciser quel type d'√©tablissement vous recherchez et dans quelle ville ?"
            
            # Si pas de crit√®res de localisation, demander plus d'informations
            if 'commune' not in criteria:
                return "Pourriez-vous pr√©ciser dans quelle commune ou ville vous souhaitez effectuer votre recherche ?"
            
            # Recherche des √©tablissements via l'API
            establishments = self.search_establishments(criteria)
            
            # G√©n√©rer une r√©ponse naturelle avec le LLM
            response = self.generate_natural_response(establishments, query, criteria)
            
            return response

# Exemple d'utilisation
if __name__ == "__main__":
    api_base_url = "https://tabular-api.data.gouv.fr/api/resources/93ae96a7-1db7-4cb4-a9f1-6d778370b640/data/"
    gemini_api_key = ""  # Remplacez par votre cl√© API
    
    chatbot = ChatbotInclusifGemini(api_base_url, gemini_api_key)
    
    
    print("Chatbot Inclusif avec Gemini et API initialis√©. Posez votre question (ou tapez 'quit' pour quitter):")
    
    while True:
        user_query = input("\nVotre question: ")
        
        if user_query.lower() in ['quit', 'exit', 'q']:
            print("Au revoir !")
            break
            
        response = chatbot.process_query(user_query)
        print("\nR√©ponse du chatbot:")
        print(response)